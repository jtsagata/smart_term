#!/usr/bin/bash
AUTOMATION_DIR=$(dirname "$(readlink -f "$BASH_SOURCE")")

declare -A HelpTexts

function cmd_install() {
    curl -s -Lo "$AUTOMATION_DIR/bin/shell_theme" 'https://raw.githubusercontent.com/lemnos/theme.sh/master/bin/theme.sh'
    chmpod +x "$AUTOMATION_DIR/bin/shell_theme"
    curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
}

function containsElement() {
    for e in "${@:2}"; do [[ "$e" = "$1" ]] && return 0; done
    return 1
}

HelpTexts[enable]="Enable module <name>"
function cmd_enable() {
    filename=$1
    module="${AUTOMATION_DIR}/modules/available/${filename##*/}"
    symlink="${AUTOMATION_DIR}/modules/enabled/${filename##*/}"
    if [ -e "${module}" ]; then
        printf "Symlinking %s ->%s\n" "${module}" "${symlink}"
        ln -sf "${module}" "${symlink}"
    else
        printf "Error: module '%s' does not exists\n" "${module}"
    fi
}


HelpTexts[disable_all]="Disable all modules"
function cmd_disable_all() {
    rm "${AUTOMATION_DIR}/modules/enabled/*"
}

HelpTexts[enable_all]="Enable all modules"
function cmd_enable_all() {
    for filename in "$AUTOMATION_DIR"/modules/available/*; do
        base_name="${filename##*/}"
        cmd_enable "${base_name}"
    done
}

HelpTexts[disable]="Disable module <name>"
function cmd_disable() {
    filename=$1
    symlink="${AUTOMATION_DIR}/modules/enabled/${filename##*/}"
    rm "$symlink" || true
}

HelpTexts[reload]="ReLoad enabled  modules"
function cmd_reload() {
    for filename in "$AUTOMATION_DIR"/modules/enabled/*; do
        if [ -e "$filename" ]; then
            # shellcheck disable=SC1090
            source "$filename"
        fi
    done
}

HelpTexts[list]="List all module statuses"
function cmd_list() {
    declare -a FileNames
    declare -A FileDescriptions
    declare -A FileStatus

    # Check files in available
    for filename in "$AUTOMATION_DIR"/modules/available/*; do
        base_name="${filename##*/}"
        module="${AUTOMATION_DIR}/modules/available/${filename##*/}"
        symlink="${AUTOMATION_DIR}/modules/enabled/${filename##*/}"
        description=$(perl -lne 'print $1 if /# Description: (.*)/' "$filename")

        # Check if the simlink exists
        if [ -L "${symlink}" ]; then
            # Check if symlink is valid
            if [ -e "${symlink}" ]; then
                # Check if symlink actually points to module
                if [ "$module" -ef "$symlink" ]; then
                    status=$(pastel --color-mode=24bit paint Green "Enabled")
                else
                    status=$(pastel --color-mode=24bit paint Red "Bad link")
                    description=$(readlink -f "$symlink")
                    description=$(printf -- "-> %s" "$description")
                fi
            else
                status=$(pastel --color-mode=24bit paint Red "Invalid link")
                description=$(readlink -f "$symlink")
                description=$(printf -- "-> %s" "$description")
            fi
        else
            status="Dissabled"
        fi

        FileNames+=("$base_name")
        FileDescriptions["$base_name"]=$description
        FileStatus["$base_name"]="$status"
    done

    # Now check files that exists in enabled but not in available
    for filename in "$AUTOMATION_DIR"/modules/enabled/*; do
        base_name="${filename##*/}"
        if ! containsElement "$base_name" "${FileNames[@]}"; then
            if [ -e "$filename" ]; then
                description=$(perl -lne 'print $1 if /# Description: (.*)/' "$filename")
                FileStatus["$base_name"]=$(pastel --color-mode=24bit paint Yellow "No module")
            else
                FileStatus["$base_name"]=$(pastel --color-mode=24bit paint Red "Invalid link")
                description=$(readlink -f "$symlink")
                description=$(printf -- "-> %s" "$description")
            fi
            FileNames+=("$base_name")
            FileDescriptions["$base_name"]=$description

        fi
    done

    tmpfile=$(mktemp /tmp/mod_tool.XXXXXX)
    for key in "${FileNames[@]}"; do
        printf "@@%s@@%s@@%s@@\n" "${FileStatus["$key"]}" "$key" "${FileDescriptions["$key"]}" >>"$tmpfile"
    done
    column -t -s "@@" <"$tmpfile"
    rm "$tmpfile"
}

function cmd_help() {
    tmpfile=$(mktemp /tmp/mod_tool_help.XXXXXX)
    echo "Usage:"
    for key in "${!HelpTexts[@]}"; do
        printf "   %s|%s\n" "$key:" "${HelpTexts[$key]}" >>"$tmpfile"
    done
    column -t -s "|" <"$tmpfile"
    rm "$tmpfile"
}

command=$1
shift || true
if [ "$command" = "--help" ]; then
    command="help"
fi
func=cmd_"${command}"
if [ "$(type -t "$func")" == "function" ]; then
    $func "$@"
else 
    cmd_help
fi
